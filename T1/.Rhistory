for(index in 1:25){
population <- breeding.diploid(population, breeding.size = 200,
selection.size = c(100,100),
best.selection.ratio.m = 5,
best.selection.ratio.f = 5)
}
analyze.population(population, gen = 98:115, chromosome = 1, snp = qtl_posi)
# Load in some data (Ideally real-world but here from an simulated MoBPS population
data(ex_pop)
pheno <- get.pheno(ex_pop, gen=1:5)
geno <- get.geno(ex_pop, gen=1:5)
haplo <- get.haplo(ex_pop, gen=1:5)
map <- get.map(ex_pop, use.snp.nr=TRUE)
# Estimate marker effects
real.bv.add <- effect.estimate.add(geno, pheno, map)
# Generate new population (or in this case exactly the same) with estimated marker effects
population <- creating.diploid(dataset = haplo, map = map, real.bv.add = real.bv.add)
# First run of breeding.diploid to calculate true genomic values
population <- breeding.diploid(population)
# Check how good the approximation works here:
cor(get.bv(population, gen=1)[1,], get.pheno(ex_pop, gen=1:5)[1,])
cor(get.bv(population, gen=1)[1,], get.bv(ex_pop, gen=1:5)[1,])
# Generation of a small population with 10 individuals from two distinct pools
population = creating.diploid(nsnp=100, nindi=4, founder.pool = 1)
population = creating.diploid(population = population , nsnp=100, nindi=4,
founder.pool = 2)
# Generation of a trait that will only have variablity in pool 1
population = creating.trait(population, n.additive = 100, trait.pool = 1)
setwd("~/Documents/1Teach/UNA/GenomicaAnimal_2024/Semana4/day4")
setwd("~/Documents/1Teach/UNA/GenomicaAnimal_2024/Semana4/day4")
setwd("~/Documents/1Teach/UNA/GenomicaAnimal_2024/Semana4/day4")
install.packages("risrael")
library(risrael)
install.packages("risrael")
install.packages("rentrez")
library(rentrez)
# Buscar artículos en PubMed
search_results <- entrez_search(db = "pubmed", term = "maternal genetic effects")
print(search_results$ids)  # IDs de los artículos encontrados
# Buscar artículos en PubMed
search_results <- entrez_search(db = "pubmed", term = "maternal genetic effects")
print(search_results$ids)  # IDs de los artículos encontrados
View(search_results)
rm(list = ls())
graphics.off()
library(tidyverse)
library(tidyverse)
library(kableExtra)
setwd("~/Documents/1Teach/UNA/GeneticaAnimalAvanzada_2024/T1")
pedigri <- read.table("pedigri_Merino.txt", header = T)
nrow(pedigri)
```{r}
fenotipo <- read.table("fenotipo_Merino.txt", header = T, na.strings = "0")
fenotipo %>%
drop_na(d_fibra) %>%
group_by(Anho) %>%
summarise(Número = n(),
Promedio = mean(d_fibra)) %>%
rename(Año = Anho) %>%
kbl()
fenotipo %>%
drop_na(peso_vivo) %>%
group_by(Anho) %>%
summarise(Número = n(),
Promedio = mean(peso_vivo)) %>%
rename(Año = Anho) %>%
kbl()
system("./renumf90 param_BLUP_df.txt")
system("./blupf90+ renf90.par")
soluciones_df <- read.table("acc_bf90", header = F)
soluciones_df %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df/2,    # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df)) %>%   # Saca raiz cuadrada de confiabilidad para obtener
summarise(Promedio_DF = mean(EBV_df))
soluciones_df %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(DEP_df) %>%
mutate(Ranking = 1:n()) %>%
head(10)
soluciones_df %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-r_df) %>%
mutate(Ranking = 1:n()) %>%
head(10)
system("./renumf90 param_BLUP_pve.txt")
system("./blupf90+ renf90.par")
soluciones_pve <- read.table("acc_bf90", header = F)
fenotipo <- read.table("fenotipo_Merino.txt", header = T, na.strings = "0")
library(optiSel)
tempo <- prePed(pedigri)
head(tempo)
library(optiSel)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
hembra <- prePed(pedigri)
hembras <- prePed(pedigri)
head(hembras,2)
total_pedigri <- prePed(pedigri)
hembras <- total_pedigri[, (1,4)]
hembras <- total_pedigri[, c(1,4)]
info_sexo <- total_pedigri[, c(1,4)]
info_sexo
head(total_pedigri)
head(info_sexo,2)
head(info_sexo,2)
head(soluciones_pve,2)
fenotipo_sol <- merge(soluciones_pve, info_sexo, by.x = V3,  by.y = Indiv)
fenotipo_sol <- merge(soluciones_pve, info_sexo, by.x = "V3",  by.y = "Indiv")
head(fenotipo_sol)
sol_sex <- merge(soluciones_pve, info_sexo, by.x = "V3",  by.y = "Indiv")
head(sol_sex,2)
sol_sex %>%
filter(Sex = female)
sol_sex %>%
filter(Sex == female)
sol_sex %>%
filter(Sex == "female")
head(sol_sex,2)
sol_sex %>%
filter(Sex == female)
sol_sex %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
filter(Sex == female)
sol_sex %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
)
sol_sex %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
filter(Sex == female)
sol_sex %>%
filter(Sex %in% "female") %>%
select(-V1, -V2)
sol_sex %>%
filter(Sex == "female") %>%
select(-V1, -V2)
sol_sex %>%
filter(Sex == "female") %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
)
sol_sex %>%
filter(Sex == "female") %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-DEP_pve) %>%
mutate(Ranking = 1:n()) %>%
head(10)
system("./renumf90 param_BLUP_df.txt")
system("./blupf90+ renf90.par")
setwd("~/Documents/1Teach/UNA/GeneticaAnimalAvanzada_2024/T1")
soluciones_df <- read.table("acc_bf90_df", header = F)
soluciones_df <- read.table("acc_bf90_df", header = F)
soluciones_df %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df/2,    # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df)) %>%   # Saca raiz cuadrada de confiabilidad para obtener
summarise(Promedio_DF = mean(EBV_df))  # Saca raiz cuadrada de confiabilidad para obtener
soluciones_df <- read.table("acc_bf90_df", header = F)
soluciones_df <- read.table("acc_bf90_df", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_sex <- merge(soluciones_df, info_sexo, by.x = "V3",  by.y = "Indiv")
sol_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-DEP_pve) %>%
mutate(Ranking = 1:n()) %>%
head(10)
soluciones_df <- read.table("acc_bf90_df", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_sex <- merge(soluciones_df, info_sexo, by.x = "V3",  by.y = "Indiv")
sol_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-DEP_pve) %>%
mutate(Ranking = 1:n()) %>%
head(10)
head(sol_sex)
sol_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-DEP_df) %>%
mutate(Ranking = 1:n()) %>%
head(10)
sol_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(DEP_df) %>%
mutate(Ranking = 1:n()) %>%
head(10)
sol_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(r_df) %>%
mutate(Ranking = 1:n()) %>%
head(10)
sol_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-r_df) %>%
mutate(Ranking = 1:n()) %>%
head(10)
head(fenotipo,2)
rename(id = V3,              # Renombra V3 a "id"
)
fenotipo <- read.table("fenotipo_Merino.txt", header = T, na.strings = "0")
head(fenotipo,2)
system("./renumf90 param_BLUP_pve.txt")
system("./blupf90+ renf90.par")
soluciones_pve <- read.table("acc_bf90_pve", header = F)
soluciones_pve <- read.table("acc_bf90_pve", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_pve_sex <- merge(soluciones_pve, info_sexo, by.x = "V3",  by.y = "Indiv")
head(sol_pve_sex,2)
so_pvel_sex %>%
filter(Sex == "female") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-DEP_pve) %>%
mutate(Ranking = 1:n()) %>%
head(10)
sol_pve_sex <- merge(soluciones_pve, info_sexo, by.x = "V3",  by.y = "Indiv")
sol_pvel_sex %>%
filter(Sex == "female") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-DEP_pve) %>%
mutate(Ranking = 1:n()) %>%
head(10)
sol_pve_sex %>%
filter(Sex == "female") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-DEP_pve) %>%
mutate(Ranking = 1:n()) %>%
head(10)
soluciones_df <- read.table("acc_bf90_df", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_df_sex <- merge(soluciones_df, info_sexo, by.x = "V3",  by.y = "Indiv")
sol_df_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(DEP_df) %>%
mutate(Ranking = 1:n()) %>%
head(10)
sol_df_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(DEP_df) %>%
mutate(Ranking = 1:n()) %>%
head(1)
head(fenotipo)
system("./renumf90 param_VCE_df.txt")
system("./blupf90+ renf90.par")
head(fenotipo,2)
system("./renumf90 param_VCE_pve.txt")
system("./blupf90+ renf90.par")
pedigri <- read.table("pedigri_Merino.txt", header = T)
fenotipo <- read.table("fenotipo_Merino.txt", header = T, na.strings = "0")
soluciones_df <- read.table("acc_bf90_df", header = F)
soluciones_df <- read.table("acc_bf90_df", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_sex <- merge(soluciones_df, info_sexo, by.x = "V3",  by.y = "Indiv")
soluciones_pve <- read.table("acc_bf90_pve", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_pve_sex <- merge(soluciones_pve, info_sexo, by.x = "V3",  by.y = "Indiv")
soluciones_df <- read.table("acc_bf90_df", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_df_sex <- merge(soluciones_df, info_sexo, by.x = "V3",  by.y = "Indiv")
rm(info_sexo)
rm(total_pedigri)
setwd("~/Documents/1Teach/UNA/GeneticaAnimalAvanzada_2024/T1")
rm(list = ls())
graphics.off()
rm(list = ls())
graphics.off()
library(tidyverse)
library(kableExtra)
setwd("~/Documents/1Teach/UNA/GeneticaAnimalAvanzada_2024/T1")
pedigri <- read.table("pedigri_Merino.txt", header = T)
nrow(pedigri)
head(pedigri,3)
fenotipo <- read.table("fenotipo_Merino.txt", header = T, na.strings = "0")
head(fenotipo,3)
fenotipo %>%
drop_na(d_fibra) %>%
group_by(Anho) %>%
summarise(Número = n(),
Promedio = mean(d_fibra)) %>%
rename(Año = Anho) %>%
kbl()
head(fenotipo,2)
system("./renumf90 param_BLUP_df.txt")
system("./renumf90 param_BLUP_df.txt")
system("./blupf90+ renf90.par")
system("./renumf90 param_BLUP_df.txt")
system("./blupf90+ renf90.par")
system("./renumf90 param_BLUP_df.txt")
system("./blupf90+ renf90.par")
soluciones_df <- read.table("acc_bf90_df", header = F)
soluciones_df %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df/2,    # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df)) %>%   # Raiz cuadrada de confiabilidad
summarise(Promedio_DF = mean(EBV_df))  %>% # promedio de EBV_df
kbl()
soluciones_df <- read.table("acc_bf90_df", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_sex <- merge(soluciones_df, info_sexo, by.x = "V3",  by.y = "Indiv")
sol_df_sex <- merge(soluciones_df, info_sexo, by.x = "V3",  by.y = "Indiv")
sol_df_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(DEP_df) %>%
mutate(Ranking = 1:n()) %>%
head(10) %>%
kbl()
sol_df_sex %>%
filter(Sex == "male") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-r_df) %>%
mutate(Ranking = 1:n()) %>%
head(10) %>%
kbl()
system("./renumf90 param_BLUP_pve.txt")
system("./blupf90+ renf90.par")
soluciones_pve <- read.table("acc_bf90_pve", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
library(optiSel)
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_pve_sex <- merge(soluciones_pve, info_sexo, by.x = "V3",  by.y = "Indiv")
sol_pve_sex %>%
filter(Sex == "female") %>%  # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_pve = V4,          # Renombra V4 a "EBV_df"
r2_pve = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_pve = EBV_pve / 2,  # Divide EBV_df entre dos y crea DEP_df
r_pve = sqrt(r2_pve),   # Saca raíz cuadrada de r2_df
) %>%  # Crea columna de Ranking
arrange(-DEP_pve) %>%
mutate(Ranking = 1:n()) %>%
head(10) %>%
kbl()
soluciones_df <- read.table("acc_bf90_df", header = F)
pedigri <- read.table("pedigri_Merino.txt", header = T, na.strings = "0")
total_pedigri <- prePed(pedigri)
info_sexo <- total_pedigri[, c(1,4)]
sol_df_sex <- merge(soluciones_df, info_sexo, by.x = "V3",  by.y = "Indiv")
sol_df_sex %>%
filter(Sex == "male") %>%    # Selecciona solo hembras
select(-V1, -V2) %>%         # Elimina las columnas V1 y V2
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df),   # Saca raíz cuadrada de r2_df
) %>%
arrange(DEP_df) %>%
mutate(Ranking = 1:n()) %>%  # Crea columna de Ranking
head(1) %>%
kbl()
Creamos al archivo de parametros `param_VCE_df.txt` con el siguiente detalle:
