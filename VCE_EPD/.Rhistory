install.packages("~/Downloads/MoBPS_1.11.90.tar.gz", repos = NULL, type = "source")
ls -lt
setwd("~/Documents/0Posdoc/Alpaca/Abstracts/California/alpaca25con_vcf")
# For each simulation, this includes information on genetic values, inbreeding levels and
# the accuracy of the BVE
rm(list = ls()); gc()
graphics.off()
load("alpaca_scenario1nr1size0.1.RData")
load("alpaca_scenario1nr1size0.1_pop.RData")
# variances
get.variance(population , cohorts = "breedingpopulation_20_M")
get.variance(population , cohorts = "offspring_20_M")
load("alpaca_scenario1nr1size0.1.RData")
load("alpaca_scenario1nr1size0.1_pop.RData")
# variances
get.variance(population , cohorts = "breedingpopulation_20_M")
get.variance(population , cohorts = "offspring_20_M")
get.variance(population , cohorts = "preselectmale_20_M")
get.variance(population , cohorts = "offspring_20_M_sel")
get.variance(population , cohorts = "breedingpopulation_20_M_keep")
# Principle components analysis
get.pca(population, gen=1:2, coloring=c(rep(1,10), rep(2,10), rep(3,100)))
# Extraction of the genomic values of all included lines
bv_pool1 <- get.bve(population, cohorts="offspring_20_M")
bv_pool1 <- get.bv(population, cohorts="offspring_20_M")
bv_pool2 <- get.bv(population, cohorts="offspring_20_F")
bv_hybrid <- get.bv(population, cohorts="Hybrid")
# For trait 3 we can we much higher genomic values of the hybrid lines
# Trait architecture with dominant effects
par(mfrow=c(3,3))
hist(bv_pool1[1,], xlim=c(94,115), main="Trait 1", ylab="Pool 1", xlab="genomic value")
hist(bv_pool1[2,], xlim=c(94,115), main="Trait 2", xlab="genomic value")
hist(bv_pool1[3,], xlim=c(94,115), main="Trait 3", xlab="genomic value")
hist(bv_pool2[1,], xlim=c(94,115), main="", ylab="Pool 2", xlab="genomic value")
hist(bv_pool2[2,], xlim=c(94,115), main="", xlab="genomic value")
hist(bv_pool2[3,], xlim=c(94,115), main="", xlab="genomic value")
hist(bv_hybrid[1,], xlim=c(94,115), main="", ylab="Hybrids", xlab="genomic value")
hist(bv_hybrid[2,], xlim=c(94,115), main="", xlab="genomic value")
hist(bv_hybrid[3,], xlim=c(94,115), main="", xlab="genomic value")
rowMeans(bv_pool1)
rowMeans(bv_pool2)
rowMeans(bv_hybrid)
bvs <- list(numeric(5), numeric(5))
n_run <- 2
for(scenario in 1:7){
for(run in 1:n_run){
load(paste0(paste0("alpaca_scenario", scenario, "nr", run,"size0.1.RData")))
bvs[[scenario]][run] <-  EBV[1,which(cohorts=="offspring_20_M")]
}
}
bvs <- list(numeric(5), numeric(5))
bvs <- list(numeric(25), numeric(25))
n_run <- 25
for(scenario in 1:7){
for(run in 1:n_run){
load(paste0(paste0("alpaca_scenario", scenario, "nr", run,"size0.1.RData")))
bvs[[scenario]][run] <-  EBV[1,which(cohorts=="offspring_20_M")]
}
}
for(scenario in 1:7){
for(run in 1:n_run){
load(paste0(paste0("alpaca_scenario", scenario, "nr", run,"size0.1.RData")))
bvs[[scenario]][run] <-  EBV[1,which(cohorts=="offspring_20_M")]
}
}
rm(list = ls())
TBV_avg <- list()
EBV_avg <- list()
ACC_avg <- list()
KIN_avg <- list()
Pheno_avg <- list()
n_run <- 25
for(scenario in 1:7){
for(run in 1:n_run){
load(paste0(paste0("alpaca_scenario", scenario, "nr", run,"size0.1.RData")))
if(run==1){
TBV_avg[[scenario]] <-   TBV / n_run
EBV_avg[[scenario]] <-   EBV / n_run
ACC_avg[[scenario]] <-   ACC / n_run
KIN_avg[[scenario]] <-   KIN / n_run
Pheno_avg[[scenario]] <-  Pheno /n_run
} else{
TBV_avg[[scenario]] <-  TBV_avg[[scenario]] + TBV / n_run
EBV_avg[[scenario]] <-  EBV_avg[[scenario]] + EBV / n_run
ACC_avg[[scenario]] <-  ACC_avg[[scenario]] + ACC / n_run
KIN_avg[[scenario]] <-  KIN_avg[[scenario]] + KIN / n_run
Pheno_avg[[scenario]] <-  Pheno_avg[[scenario]] + Pheno / n_run
}
}
}
what_to_plot <- paste0("breedingpopulation_", 0:20,"_F") #c1
to_plot <- which(cohorts %in% what_to_plot)
# Visualization of the underlying true genomic values of the 1yearRams in the different cycles
########################################################
#########               TBV                      #######
########################################################
par(mfrow=c(1,2))
traitname <- c("Fleece weight", "Fiber Diameter")
for(trait in 1:2){
plot(0:20, TBV_avg[[1]][trait,to_plot], type="l", main=traitname[trait],
xlab="Breeding Cycle", ylab="TBV", lwd=2, ylim = c(94, 107))
for(sc in 2:7){
lines(0:20, TBV_avg[[sc]][trait,to_plot], col=sc, type="l", xlab="Breeding Cycle", ylab="genomic value", lwd=2)
}
}
legend("topleft",
c("pedBLUP", "ssGBLUP_Top25M", "ssGBLUP_Top50M", "ssGBLUP_100M", "ssGBLUP_100M_Top25F", "ssGBLUP_100M_Top50F", "ssGBLUP_100M_100F"),
lty=1, lwd=2, col=1:7)
par(mfrow=c(1,2))
traitname <- c("Fleece weight", "Fiber Diameter")
for(trait in 1:2){
plot(0:20, EBV_avg[[1]][trait,to_plot], type="l", main=traitname[trait],
xlab="cycle", ylab="EBV",  lwd=2,ylim = c(90, 110))
for(sc in 2:7){
lines(0:20, EBV_avg[[sc]][trait,to_plot], col=sc, type="l", xlab="cycle",
ylab="genomic value", lwd=2)
}
}
plot(density(ACC_avg[[1]], na.rm = TRUE))
to_plot <- which(cohorts %in% what_to_plot)
traitname <- c("Fleece weight", "Fiber Diameter")
par(mfrow=c(1,2))
for(trait in 1:2){
plot(0:20, ACC_avg[[1]][trait,to_plot], type="l", main=traitname[trait],
xlab="Breeding Cycle", ylab="prediction accuracy", lwd=2, ylim=c(0,1))
for(sc in 2:7){
lines(0:20, ACC_avg[[sc]][trait,to_plot],
col=sc, type="l",
xlab="Breeding Cycle", ylab="prediction accuracy", lwd=2)
}
}
legend("bottomleft",
c("pedBLUP", "ssGBLUP_Top25M", "ssGBLUP_Top50M", "ssGBLUP_100M", "ssGBLUP_100M_Top25F", "ssGBLUP_100M_Top50F", "ssGBLUP_100M_100F"),
lty=1, lwd=2, col=1:7)
to_plot <- which(cohorts %in% what_to_plot)
traitname <- c("Fleece weight", "Fiber Diameter")
par(mfrow=c(1,2))
for(trait in 1:2){
plot(0:20, Pheno_avg[[1]][trait,to_plot], type="l", main=traitname[trait],
xlab="cycle", ylab="Phenotype", lwd=2, ylim=c(95,110))
for(sc in 2:7){
lines(0:20, Pheno_avg[[sc]][trait,to_plot],
col=sc, type="l",
xlab="Breeding Cycle", ylab="prediction accuracy", lwd=2)
}
}
########################################################
#########               Inbreeding                      #######
########################################################
par(mfrow=c(1,1))
traitname <- c("Development of Coancestry", "Development of Coancestry")
for(trait in 1:2){
plot(0:20, KIN_avg[[1]][trait,to_plot], type="l", main=traitname[trait],
xlab="Breeding Cycle", ylab="TBV", lwd=2)
for(sc in 2:7){
lines(0:20, KIN_avg[[sc]][trait,to_plot], col=sc, type="l", xlab="Breeding Cycle", ylab="genomic value", lwd=2)
}
}
setwd("~/alpacaPAG_2025")
# For each simulation, this includes information on genetic values, inbreeding levels and
# the accuracy of the BVE
rm(list = ls()); gc()
graphics.off()
# variances
get.variance(population , cohorts = "breedingpopulation_20_M")
# Principle components analysis
get.pca(population, gen=1:2, coloring=c(rep(1,10), rep(2,10), rep(3,100)))
library(MoBPS)
# For each simulation, this includes information on genetic values, inbreeding levels and
# the accuracy of the BVE
rm(list = ls()); gc()
graphics.off()
load("alpaca_scenario1nr1size0.1.RData")
load("alpaca_scenario1nr1size0.1_pop.RData")
# variances
get.variance(population , cohorts = "breedingpopulation_20_M")
get.variance(population , cohorts = "offspring_20_M")
get.variance(population , cohorts = "preselectmale_20_M")
get.variance(population , cohorts = "offspring_20_M_sel")
get.variance(population , cohorts = "breedingpopulation_20_M_keep")
get.variance(population , cohorts = "breedingpopulation_20_F_keep")
# Principle components analysis
get.pca(population, gen=1:2, coloring=c(rep(1,10), rep(2,10), rep(3,100)))
setwd("~/Documents/0Posdoc/Alpaca/Abstracts/California/alpaca25con_vcf")
# For each simulation, this includes information on genetic values, inbreeding levels and
# the accuracy of the BVE
rm(list = ls()); gc()
graphics.off()
load("alpaca_scenario1nr1size0.1.RData")
load("alpaca_scenario1nr1size0.1_pop.RData")
# variances
get.variance(population , cohorts = "breedingpopulation_20_M")
# Principle components analysis
get.pca(population, gen=1:2, coloring=c(rep(1,10), rep(2,10), rep(3,100)))
# Extraction of the genomic values of all included lines
bv_pool1 <- get.bve(population, cohorts="offspring_20_M")
bv_pool1 <- get.bv(population, cohorts="offspring_20_M")
bv_pool2 <- get.bv(population, cohorts="offspring_20_F")
bv_hybrid <- get.bv(population, cohorts="Hybrid")
# For trait 3 we can we much higher genomic values of the hybrid lines
# Trait architecture with dominant effects
par(mfrow=c(3,3))
hist(bv_pool1[1,], xlim=c(94,115), main="Trait 1", ylab="Pool 1", xlab="genomic value")
hist(bv_pool1[2,], xlim=c(94,115), main="Trait 2", xlab="genomic value")
hist(bv_pool1[3,], xlim=c(94,115), main="Trait 3", xlab="genomic value")
hist(bv_pool2[1,], xlim=c(94,115), main="", ylab="Pool 2", xlab="genomic value")
hist(bv_pool2[2,], xlim=c(94,115), main="", xlab="genomic value")
hist(bv_pool2[3,], xlim=c(94,115), main="", xlab="genomic value")
hist(bv_hybrid[1,], xlim=c(94,115), main="", ylab="Hybrids", xlab="genomic value")
hist(bv_hybrid[2,], xlim=c(94,115), main="", xlab="genomic value")
hist(bv_hybrid[3,], xlim=c(94,115), main="", xlab="genomic value")
rowMeans(bv_pool1)
rowMeans(bv_pool2)
rowMeans(bv_hybrid)
rm(list = ls())
TBV_avg <- list()
EBV_avg <- list()
ACC_avg <- list()
KIN_avg <- list()
Pheno_avg <- list()
n_run <- 25
for(scenario in 1:7){
for(run in 1:n_run){
load(paste0(paste0("alpaca_scenario", scenario, "nr", run,"size0.1.RData")))
if(run==1){
TBV_avg[[scenario]] <-   TBV / n_run
EBV_avg[[scenario]] <-   EBV / n_run
ACC_avg[[scenario]] <-   ACC / n_run
KIN_avg[[scenario]] <-   KIN / n_run
Pheno_avg[[scenario]] <-  Pheno /n_run
} else{
TBV_avg[[scenario]] <-  TBV_avg[[scenario]] + TBV / n_run
EBV_avg[[scenario]] <-  EBV_avg[[scenario]] + EBV / n_run
ACC_avg[[scenario]] <-  ACC_avg[[scenario]] + ACC / n_run
KIN_avg[[scenario]] <-  KIN_avg[[scenario]] + KIN / n_run
Pheno_avg[[scenario]] <-  Pheno_avg[[scenario]] + Pheno / n_run
}
}
}
what_to_plot <- paste0("breedingpopulation_", 0:20,"_F") #c1
to_plot <- which(cohorts %in% what_to_plot)
# Visualization of the underlying true genomic values of the 1yearRams in the different cycles
########################################################
#########               TBV                      #######
########################################################
par(mfrow=c(1,2))
traitname <- c("Fleece weight", "Fiber Diameter")
for(trait in 1:2){
plot(0:20, TBV_avg[[1]][trait,to_plot], type="l", main=traitname[trait],
xlab="Breeding Cycle", ylab="TBV", lwd=2, ylim = c(94, 107))
for(sc in 2:7){
lines(0:20, TBV_avg[[sc]][trait,to_plot], col=sc, type="l", xlab="Breeding Cycle", ylab="genomic value", lwd=2)
}
}
n_run <- 5
for(scenario in 1:7){
for(run in 1:n_run){
load(paste0(paste0("alpaca_scenario", scenario, "nr", run,"size0.1.RData")))
if(run==1){
TBV_avg[[scenario]] <-   TBV / n_run
EBV_avg[[scenario]] <-   EBV / n_run
ACC_avg[[scenario]] <-   ACC / n_run
KIN_avg[[scenario]] <-   KIN / n_run
Pheno_avg[[scenario]] <-  Pheno /n_run
} else{
TBV_avg[[scenario]] <-  TBV_avg[[scenario]] + TBV / n_run
EBV_avg[[scenario]] <-  EBV_avg[[scenario]] + EBV / n_run
ACC_avg[[scenario]] <-  ACC_avg[[scenario]] + ACC / n_run
KIN_avg[[scenario]] <-  KIN_avg[[scenario]] + KIN / n_run
Pheno_avg[[scenario]] <-  Pheno_avg[[scenario]] + Pheno / n_run
}
}
}
what_to_plot <- paste0("breedingpopulation_", 0:20,"_F") #c1
to_plot <- which(cohorts %in% what_to_plot)
# Visualization of the underlying true genomic values of the 1yearRams in the different cycles
########################################################
#########               TBV                      #######
########################################################
par(mfrow=c(1,2))
traitname <- c("Fleece weight", "Fiber Diameter")
for(trait in 1:2){
plot(0:20, TBV_avg[[1]][trait,to_plot], type="l", main=traitname[trait],
xlab="Breeding Cycle", ylab="TBV", lwd=2, ylim = c(94, 107))
for(sc in 2:7){
lines(0:20, TBV_avg[[sc]][trait,to_plot], col=sc, type="l", xlab="Breeding Cycle", ylab="genomic value", lwd=2)
}
}
n_run <- 25
for(scenario in 1:7){
for(run in 1:n_run){
load(paste0(paste0("alpaca_scenario", scenario, "nr", run,"size0.1.RData")))
if(run==1){
TBV_avg[[scenario]] <-   TBV / n_run
EBV_avg[[scenario]] <-   EBV / n_run
ACC_avg[[scenario]] <-   ACC / n_run
KIN_avg[[scenario]] <-   KIN / n_run
Pheno_avg[[scenario]] <-  Pheno /n_run
} else{
TBV_avg[[scenario]] <-  TBV_avg[[scenario]] + TBV / n_run
EBV_avg[[scenario]] <-  EBV_avg[[scenario]] + EBV / n_run
ACC_avg[[scenario]] <-  ACC_avg[[scenario]] + ACC / n_run
KIN_avg[[scenario]] <-  KIN_avg[[scenario]] + KIN / n_run
Pheno_avg[[scenario]] <-  Pheno_avg[[scenario]] + Pheno / n_run
}
}
}
what_to_plot <- paste0("breedingpopulation_", 0:20,"_F") #c1
to_plot <- which(cohorts %in% what_to_plot)
# Visualization of the underlying true genomic values of the 1yearRams in the different cycles
########################################################
#########               TBV                      #######
########################################################
par(mfrow=c(1,2))
traitname <- c("Fleece weight", "Fiber Diameter")
for(trait in 1:2){
plot(0:20, TBV_avg[[1]][trait,to_plot], type="l", main=traitname[trait],
xlab="Breeding Cycle", ylab="TBV", lwd=2, ylim = c(94, 107))
for(sc in 2:7){
lines(0:20, TBV_avg[[sc]][trait,to_plot], col=sc, type="l", xlab="Breeding Cycle", ylab="genomic value", lwd=2)
}
}
legend("topleft",
c("pedBLUP", "ssGBLUP_Top25M", "ssGBLUP_Top50M", "ssGBLUP_100M", "ssGBLUP_100M_Top25F", "ssGBLUP_100M_Top50F", "ssGBLUP_100M_100F"),
lty=1, lwd=2, col=1:7)
A <- matrix(c(1,-1,0,-2,3,-1,-2,-2,4),3,3)
A <- matrix(c(1,-1,0,-2,3,-1,-2,-2,4),3,3)
A <- matrix(c(1,-1,0,-2,3,-1,-2,-2,4),3,3)
A
A <- matrix(c(6,-5,8,-4,9,-3,-5,-7,1,3,4,-5),4,3)
B <- matrix(c(6,-5,8,-4,9,-3,-5,-7,1,3,4,-5),4,3)
B
B <- matrix(c(6,-5,8,-4,9,-3,-5,-7,1,3,4,-5),4,3, byrow = T)
B
A <- matrix(c(1,-1,0,-2,3,-1,-2,-2,4),3,3, byrow = T)
A
t(A)
A + t(A)
A%*%A
A%8%B
A%*%B
det(A)
t(B)%*%A
qrank(B)
qr(B)$rank
solve(A)
B + t(B)
trace(B)
trace(B%*%B)
A <- matrix(c(1,-1,0,-2,3,-1,-2,-2,4),3,3, byrow = T)
A
B <- matrix(c(6,-5,8,-4,9,-3,-5,-7,1,3,4,-5),4,3, byrow = T)
B
t(A)
A + t(A)
A%*%A
A%*%B
rm(list = ls())
A <- matrix(c(1,-1,0,-2,3,-1,-2,-2,4),3,3, byrow = T)
A
B <- matrix(c(6,-5,8,-4,9,-3,-5,-7,1,3,4,-5),4,3, byrow = T)
B
t(A)
A + t(A)
A%*%A
A%*%B
det(A)
A%*%B
B + t(B)
rm(list = ls())
graphics.off()
setwd("~/Documents/0Posdoc/Git/VCE")
fenotipo <- read.table("fenotipo_Merino.txt", header = T, na.strings = "0")
soluciones_df <- read.table("acc_bf90_df", header = F)
head(fenotipo)
head(soluciones_df)
sol_df_feno <- merge(soluciones_df, fenotipo, by.x = "V3",  by.y = "IId")
head(sol_df_feno)
head(sol_df_feno)
library(ggplot2)
library(dplyr)
# Asegurar que Anho sea numérico
sol_df_feno$Anho <- as.numeric(sol_df_feno$Anho)
# Calcular la media y la desviación estándar de V4 por año
df_plot <- sol_df_feno %>%
group_by(Anho) %>%
summarise(
V4_mean = mean(V4, na.rm = TRUE),
V4_sd = sd(V4, na.rm = TRUE) / sqrt(n())  # Error estándar
)
# Crear el gráfico
ggplot(df_plot, aes(x = Anho, y = V4_mean)) +
geom_point(size = 3, color = "black") +  # Puntos de la media
geom_line(size = 0.8, color = "black") +  # Línea de tendencia
geom_errorbar(aes(ymin = V4_mean - V4_sd, ymax = V4_mean + V4_sd),
width = 0.2, size = 0.8, color = "black") +  # Barras de error
theme_classic() +  # Diseño minimalista para artículos científicos
labs(x = "Año", y = "V4", title = "Tendencia de V4 por Año") +
theme(
text = element_text(size = 14, family = "serif"),  # Fuente académica
axis.text = element_text(size = 12),
panel.border = element_rect(fill = NA, color = "black", size = 0.8)  # Marco negro
)
sol_df_sex %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df) )  # Saca raíz cuadrada de r2_df
sol_df_feno %>%
select(-V1, -V2) %>%         # Elimina las dos primeras columnas
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,          # Renombra V4 a "EBV_df"
r2_df = V5) %>%       # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,  # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df) )  # Saca raíz cuadrada de r2_df
ggplot(df_plot, aes(x = Anho, y = EBV_df_mean)) +
geom_point(size = 3, color = "black") +  # Puntos de la media
geom_line(size = 0.8, color = "black") +  # Línea de tendencia
geom_errorbar(aes(ymin = EBV_df_mean - EBV_df_sd, ymax = EBV_df_mean + EBV_df_sd),
width = 0.2, size = 0.8, color = "black") +  # Barras de error
theme_classic() +  # Diseño minimalista para artículos científicos
labs(x = "Año", y = "EBV DF", title = "Tendencia genética de DF por Año") +
theme(
text = element_text(size = 14, family = "serif"),  # Fuente académica
axis.text = element_text(size = 12),
panel.border = element_rect(fill = NA, color = "black", size = 0.8)  # Marco negro
)
# Asegurar que Anho sea numérico
sol_df_feno$Anho <- as.numeric(sol_df_feno$Anho)
# Calcular la media y la desviación estándar de V4 por año
df_plot <- sol_df_feno %>%
rename(id = V3,              # Renombra V3 a "id"
EBV_df = V4,              # Renombra V4 a "EBV_df"
r2_df = V5) %>%          # Renombra V5 a "r2_df"
mutate(DEP_df = EBV_df / 2,    # Divide EBV_df entre dos y crea DEP_df
r_df = sqrt(r2_df) )  %>% # Saca raíz cuadrada de r2_df
group_by(Anho) %>%
summarise(
EBV_df_mean = mean(EBV_df, na.rm = TRUE),
EBV_df_sd = sd(EBV_df, na.rm = TRUE) / sqrt(n())  # Error estándar
)
# Crear el gráfico
ggplot(df_plot, aes(x = Anho, y = EBV_df_mean)) +
geom_point(size = 3, color = "black") +  # Puntos de la media
geom_line(size = 0.8, color = "black") +  # Línea de tendencia
geom_errorbar(aes(ymin = EBV_df_mean - EBV_df_sd, ymax = EBV_df_mean + EBV_df_sd),
width = 0.2, size = 0.8, color = "black") +  # Barras de error
theme_classic() +  # Diseño minimalista para artículos científicos
labs(x = "Año", y = "EBV DF", title = "Tendencia genética de DF por Año") +
theme(
text = element_text(size = 14, family = "serif"),  # Fuente académica
axis.text = element_text(size = 12),
panel.border = element_rect(fill = NA, color = "black", size = 0.8)  # Marco negro
)
# Crear el gráfico
ggplot(df_plot, aes(x = Anho, y = EBV_df_mean)) +
geom_point(size = 3, color = "black") +  # Puntos de la media
geom_line(size = 0.8, color = "black") +  # Línea de tendencia
geom_errorbar(aes(ymin = EBV_df_mean - EBV_df_sd, ymax = EBV_df_mean + EBV_df_sd),
width = 0.2, size = 0.8, color = "black") +  # Barras de error
theme_bw() +
labs(x = "Año", y = "EBV DF", title = "Tendencia genética de DF por Año") +
theme(
text = element_text(size = 14, family = "serif"),  # Fuente académica
axis.text = element_text(size = 12),
panel.border = element_rect(fill = NA, color = "black", size = 0.8)  # Marco negro
)
